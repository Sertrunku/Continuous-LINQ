<#@ template language="C#v3.5"#>

// <autogenerated>
// This code was generated by a tool. Any changes made manually will be lost
// the next time this code is regenerated.
// </autogenerated>

using System;
using System.Collections.Generic;
using System.Collections.Specialized;
using System.Linq;
using System.Text;
using System.ComponentModel;

namespace System {

    [System.Diagnostics.DebuggerStepThrough]
    public static class EventExtensions {
		public static void Raise(this EventHandler handler, object sender, EventArgs args) {
            if (handler != null)
                handler(sender, args);
        }
    
        public static void Raise<T>(this EventHandler<T> handler, object sender, T args) where T : EventArgs {
            if (handler != null)
                handler(sender, args);
        }

        public static void Raise(this PropertyChangingEventHandler handler, object sender, PropertyChangingEventArgs e) {
            if (handler != null)
                handler(sender, e);
        }

        public static void Raise(this PropertyChangedEventHandler handler, object sender, PropertyChangedEventArgs e) {
            if (handler != null)
                handler(sender, e);
        }

        public static void Raise(this NotifyCollectionChangedEventHandler handler, object sender, NotifyCollectionChangedEventArgs e) {
            if (handler != null)
                handler(sender, e);
        }

        public static void Raise(this Action handler) {
            if (handler != null)
                handler();
        }
<#for(int i=1;i<=20;i++){#>
        public static void Raise<<#FormatRange("T{0}", "," , 1, i); #>>(this Action<<#FormatRange("T{0}", "," , 1, i); #>> handler, <#FormatRange("T{0} t{0}", ", ", 1, i);#>) {
            if (handler != null)
                handler(<#FormatRange("t{0}", ", ", 1, i);#>);
        }
<#}#>
    }
}

<#+ 
	private void FormatRange(string itemFormatString, string separatorFormatString, int start, int end)
	{
		for(int i = start; i <= end; i++)
		{
			this.Write(string.Format(itemFormatString, i));
			if(i != end)
			{
				this.Write(string.Format(separatorFormatString, i));
			}
		}
	}
#>