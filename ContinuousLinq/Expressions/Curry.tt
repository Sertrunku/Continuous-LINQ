<#@ template language="C#" #>

// <autogenerated>
// This code was generated by a tool. Any changes made manually will be lost
// the next time this code is regenerated.
// </autogenerated>
using System;  
namespace ContinuousLinq.Expressions
{
	public static class Partials
	{
		<#for(int iOpen=1;iOpen<=19;iOpen++){#><#for(int iClose=1;iClose<=19-iOpen;iClose++){#> 
		public static Func<<#for(int iArg=1;iArg<=iOpen;iArg++){#>T<#=iArg.ToString()#>, <#}#>TReturn> Partial<<#for(int iArg=1;iArg<=iClose;iArg++){#>TC<#=iArg.ToString()#>, <#}#><#for(int iArg=1;iArg<=iOpen;iArg++){#>T<#=iArg.ToString()#>, <#}#>TReturn>(this Func<<#for(int iArg=1;iArg<=iClose;iArg++){#>TC<#=iArg.ToString()#>, <#}#><#for(int iArg=1;iArg<=iOpen;iArg++){#>T<#=iArg.ToString()#>, <#}#>TReturn> function, <#for(int iArg=1;iArg<=iClose;iArg++){#>TC<#=iArg.ToString()#> tc<#=iArg.ToString()#><#if(iArg < iClose){#>, <#}#><#}#>)
		{
			return (<#for(int iArg=1;iArg<=iOpen;iArg++){#>t<#=iArg.ToString()#><#if(iArg < iOpen){#>, <#}#><#}#>) => function(<#for(int iArg=1;iArg<=iClose;iArg++){#>tc<#=iArg.ToString()#><#if(iArg < iClose){#>, <#}#><#}#>, <#for(int iArg=1;iArg<=iOpen;iArg++){#>t<#=iArg.ToString()#><#if(iArg < iOpen){#>, <#}#><#}#>);
		}
		<#}#><#}#>

	}
}

namespace System
{
	<#for(int i=6;i<=20;i++){#>public delegate TResult Func<T1, T2, T3, T4, <#for(int j=5;j<i;j++){#>T<#=j.ToString()#><#if(j < i - 1) {#>, <#}#><#}#>, TResult>(<#for(int j=1;j<i;j++){#>T<#=j.ToString()#> t<#=j.ToString()#><#if(j < i - 1) {#>, <#}#><#}#>);
	<#}#>

}